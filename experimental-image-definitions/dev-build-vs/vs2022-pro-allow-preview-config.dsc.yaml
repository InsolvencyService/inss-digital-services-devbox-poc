# *****************************************************************************************
# NOTE: Upload this file to: https://devboxdsc.blob.core.windows.net/dsc-files/dev-build-vs
# *****************************************************************************************

# WinGet DSC configuration for Visual Studio 2022 Professional with workloads
# Version 1.0
$schema: https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  resources:
    # Step 1: Install Visual Studio 2022 Professional
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vs2022pro
      directives:
        description: Install Visual Studio 2022 Professional
      settings:
        id: Microsoft.VisualStudio.2022.Professional
        source: winget
        ensure: Present
        useLatest: true

    # Step 2: Add workloads using VisualStudioDSC
    - resource: Microsoft.VisualStudio.DSC/VSComponents
      id: vs2022pro-workloads
      directives:
        description: Add common workloads to Visual Studio 2022 Professional
      settings:
        ProductId: Microsoft.VisualStudio.Product.Professional
        ChannelId: VisualStudio.17.Release
        Components:
          - Microsoft.VisualStudio.Workload.NetWeb          # ASP.NET and web development
          - Microsoft.VisualStudio.Workload.Azure           # Azure development
          - Microsoft.VisualStudio.Workload.ManagedDesktop  # .NET desktop development
          - Microsoft.VisualStudio.Workload.Data            # Data storage and processing
        IncludeRecommended: true
        IncludeOptional: false

     ### Set RegEdit value to enable Vs 2022 preview
     ### C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE>vsregedit set local HKCU FeatureFlags\VS\Core\NewSettingsExperience Value dword 1
    - resource: PSDscResources/Script
      directives:
        description: Configure Visual Studio Registry
        allowPrerelease: true
      settings:
        GetScript: |
          # Check if the registry key exists and has the expected value
          $key = "HKCU:\FeatureFlags\VS\Core\NewSettingsExperience"
          $name = "Value"
          $expectedValue = 1
          if (Test-Path -Path $key) {
            $currentValue = Get-ItemProperty -Path $key -Name $name -ErrorAction SilentlyContinue
            if ($null -ne $currentValue -and $currentValue.$name -eq $expectedValue) {
              return @{ Result = $true }
            } else {
              return @{ Result = $false }
            }
          } else {
            return @{ Result = $false }
          }
        TestScript: |
          # Test if the registry key exists and has the expected value
          $key = "HKCU:\FeatureFlags\VS\Core\NewSettingsExperience"
          $name = "Value"
          $expectedValue = 1
          if (Test-Path -Path $key) {
            $currentValue = Get-ItemProperty -Path $key -Name $name -ErrorAction SilentlyContinue
            if ($null -ne $currentValue -and $currentValue.$name -eq $expectedValue) {
              return $true
            } else {
              return $false
            }
          } else {
            return $false
          }
        SetScript: |
          # Set the registry key using vsregedit
          $vsregeditPath = "C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\IDE\vsregedit.exe"
          $arguments = 'set local HKCU FeatureFlags\VS\Core\NewSettingsExperience Value dword 1'
          $process = Start-Process -FilePath $vsregeditPath -ArgumentList $arguments -Wait -PassThru -NoNewWindow
          if ($process.ExitCode -eq 0) {
            return @{ Result = $true }
          } else {
            return @{ Result = $false }
          }
